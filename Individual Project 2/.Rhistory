b
#e
b2 <- subset(dframe[c(3,5),c(2,4)])
b2
#f
b3 <- dframe[c(6)]
type_houses <- b3
#g
b22 <- subset(dframe[c(3,11),c(2,3)])
b22
#2.
bf = data.frame(Ints=integer(),
Doubles=double(), Characters=character(),
Logicals=logical(),
Factors=factor(),
stringsAsFactors=FALSE)
print("Structure of the empty dataframe:")
print(str(bf))
library(ggplot2)
library(ggplot2)
library(dplyr)
library(tinytex)
data("mpg")
View(m2)
#1. How many columns are in mpg dataset? How about the number of rows?
# show the codes and its result.
ncol(mpg)
nrow(mpg)
#A.
manufacturer <- mpg %>% group_by (manufacturer) %>% count()
model <- mpg %>% group_by (model) %>% count()
#B. Graph the result by using plot() and ggplot(). Write the codes and its result.
d <- mpg %>% group_by (manufacturer, model) %>% count()
plot(d)
ggplot(d, aes(x = manufacturer, y = model)) + geom_point(color = 'purple')
#3. Same dataset will be used. You are going to show the relationship of the modeland
#the manufacturer.
ggplot(d, aes(x = manufacturer, y = model)) + geom_point(color = 'purple')
#A. What does ggplot(mpg, aes(model, manufacturer)) + geom_point() show?
ggplot(mpg, aes(model, manufacturer)) + geom_point()
#4. Using the pipe (%>%), group the model and get the number of cars per model. Show
#codes and its result.
grouped_model <- mpg %>% group_by (model) %>% count()
grouped_model
#A. Plot using the geom_bar() + coord_flip() just like what is shown below. Show
#codes and its result.
qplot(model, data = mpg,main = "Number of Cars per Model", xlab = "Model",
ylab = "Number of Cars", geom = "bar", fill = manufacturer) +
coord_flip()
#B. Use only the top 20 observations. Show code and results.
top <- model[1:20,] %>% top_n(2)
top
ggplot(data = mpg, mapping = aes(x = displ, y = cyl)) +
geom_point(mapping=aes(color=displ))
#6. Get the total number of observations for drv - type of drive train
#(f = front-wheel drive, r = rear wheel drive, 4 = 4wd) and class - type of class
#(Example: suv, 2seater, etc.).
#Plot using the geom_tile() where the number of observations for class be used as a
#fill for aesthetics.
front_wheel <- subset(mpg, drv == 'f')
nrow(front_wheel)
front_wheel
rear_wheel <- subset(mpg, drv == 'r')
nrow(rear_wheel)
rear_wheel
n4 <- subset(mpg, drv == '4')
nrow(n4)
n4
suv <- subset(mpg, class == 'suv')
nrow(suv)
suv
com <- subset(mpg, class == 'compact')
nrow(com)
com
m_size <- subset(mpg, class == 'midsize')
nrow(m_size)
m_size
two_seater <- subset(mpg, class == '2seater')
nrow(two_seater)
two_seater
mini_van <- subset(mpg, class == 'minivan')
nrow(mini_van)
mini_van
p_up <- subset(mpg, class == 'pickup')
nrow(p_up)
p_up
sub_com <- subset(mpg, class == 'subcompact')
nrow(sub_com)
sub_com
#Plot using the geom_tile() where the number of observations for class be used as a fill for aesthetics.
#a. Show the codes and its result for the narrative in #6.
ggplot(mpg, aes(drv, class)) +
geom_tile (aes(fill = class))
#7. Discuss the difference between these codes. Its outputs for each are shown below.
#• Code #1
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour = "blue"))
#Code #2
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), colour = "blue")
#8. Try to run the command ?mpg. What is the result of this command?
mpg
ggplot( data = mpg) +
geom_point(mapping = aes(x = displ , y = hwy, col = displ))
#9. Plot the relationship between displ (engine displacement) and hwy(highway miles per gallon) using geom_point(). Add a trend line over the existing plot using
#  geom_smooth() with se = FALSE. Default method is “loess”.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping=aes(color=displ)) +
geom_smooth(se =FALSE)
#10. Using the relationship of displ and hwy, add a trend line over existing plot. Set the
# se = FALSE to remove the confidence interval and method = lm to check for linear modeling.
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping=aes(color=displ)) +
geom_smooth(se =FALSE,method = lm)
#1. How many columns are in mpg dataset? How about the number of rows?
# show the codes and its result.
ncol(mpg)
nrow(mpg)
# There are 11 columns and 234 rows in mpg.
#1. How many columns are in mpg dataset? How about the number of rows?
# show the codes and its result.
ncol(mpg)
nrow(mpg)
# There are 11 columns and 234 rows in mpg.
#1. How many columns are in mpg dataset? How about the number of rows?
# show the codes and its result.
ncol(mpg)
#6. Get the total number of observations for drv - type of drive train
#(f = front-wheel drive, r = rear wheel drive, 4 = 4wd) and class - type of class
#(Example: suv, 2seater, etc.).
#Plot using the geom_tile() where the number of observations for class be used as a
#fill for aesthetics.
front_wheel <- subset(mpg, drv == 'f')
nrow(front_wheel)
front_wheel
rear_wheel <- subset(mpg, drv == 'r')
nrow(rear_wheel)
rear_wheel
n4 <- subset(mpg, drv == '4')
nrow(n4)
n4
suv <- subset(mpg, class == 'suv')
nrow(suv)
suv
com <- subset(mpg, class == 'compact')
nrow(com)
com
m_size <- subset(mpg, class == 'midsize')
nrow(m_size)
m_size
two_seater <- subset(mpg, class == '2seater')
nrow(two_seater)
two_seater
mini_van <- subset(mpg, class == 'minivan')
nrow(mini_van)
mini_van
p_up <- subset(mpg, class == 'pickup')
nrow(p_up)
p_up
sub_com <- subset(mpg, class == 'subcompact')
nrow(sub_com)
sub_com
# SETUP CREDENTIALS.
CONSUMER_KEY <- "hEcNuzgnHrshkQgxRZZqZU4UP"
CONSUMER_SECRET <- "NjQoP9cmAl7DnvGXGq4d23QEb6kz5GByRWJ1Zl0iEsPHvYtcPC"
ACCESS_TOKEN <-  "1595059769857171456-TO716H2jwL0mAsNYqw6Ap1NE6bNyFX"
ACCESS_SECRET <-  "TTdaYHcKFAFKMigtV5V7QorRSExCVmuNihaX9k9DHw5H1"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-11-22", until="2022-11-29",
retryOnRateLimit = 120)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-11-22", until="2022-11-29",
retryOnRateLimit = 120)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-12-12", until="2022-12-19",
retryOnRateLimit = 120)
library(wordcloud)
library(plotly)
library(tm)
library(twitteR)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "hEcNuzgnHrshkQgxRZZqZU4UP"
CONSUMER_SECRET <- "NjQoP9cmAl7DnvGXGq4d23QEb6kz5GByRWJ1Zl0iEsPHvYtcPC"
ACCESS_TOKEN <-  "1595059769857171456-TO716H2jwL0mAsNYqw6Ap1NE6bNyFX"
ACCESS_SECRET <-  "TTdaYHcKFAFKMigtV5V7QorRSExCVmuNihaX9k9DHw5H1"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
library(askpass)
detach("package:askpass", unload = TRUE)
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
install.packages(c("boot", "bslib", "callr", "cli", "cluster", "commonmark", "cpp11", "curl", "devtools", "digest", "evaluate", "fontawesome", "foreign", "gert", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openssl", "pkgbuild", "pkgdown", "pkgload", "processx", "ps", "purrr", "ragg", "rmarkdown", "roxygen2", "rpart", "sass", "shiny", "survival", "sys", "testthat", "tidytext", "tinytex", "whisker", "xfun", "yaml", "zip"))
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
library(ggplot2)
library(twitteR)
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
library(ggplot2)
library(RColorBrewer)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
CONSUMER_SECRET <- "cIN5xCnztbtTmBXJDbtkKWaPpKFqJFAyf2F0LhQSXeBC7BjpXz"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-12-14", until="2022-12-21",
retryOnRateLimit = 120)
library(wordcloud)
library(plotly)
1
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
library(twitteR)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
CONSUMER_SECRET <- "cIN5xCnztbtTmBXJDbtkKWaPpKFqJFAyf2F0LhQSXeBC7BjpXz"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
install.packages("tm")
install.packages("tm")
install.packages("tidytext")
install.packages("plotly")
install.packages("wordcloud")
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
CONSUMER_SECRET <- "cIN5xCnztbtTmBXJDbtkKWaPpKFqJFAyf2F0LhQSXeBC7BjpXz"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
CONSUMER_SECRET <- "cIN5xCnztbtTmBXJDbtkKWaPpKFqJFAyf2F0LhQSXeBC7BjpXz"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "tQZvP0xxFdvZMHvoiEhAUXGdT"
CONSUMER_SECRET <- "cIN5xCnztbtTmBXJDbtkKWaPpKFqJFAyf2F0LhQSXeBC7BjpXz"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "CrXArDLAgmPuQOxVurcBrk3Ez"
CONSUMER_SECRET <- "EQoqQclSB6qwJMcqYrYC80yWBFrT85t1UBEcgP3L4Gge4xeOOP"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "CrXArDLAgmPuQOxVurcBrk3Ez"
CONSUMER_SECRET <- "EQoqQclSB6qwJMcqYrYC80yWBFrT85t1UBEcgP3L4Gge4xeOOP"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
install.packages("rtweet")
library(rtweet)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "CrXArDLAgmPuQOxVurcBrk3Ez"
CONSUMER_SECRET <- "EQoqQclSB6qwJMcqYrYC80yWBFrT85t1UBEcgP3L4Gge4xeOOP"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
library(rtweet)
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
library(rtweet)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "CrXArDLAgmPuQOxVurcBrk3Ez"
CONSUMER_SECRET <- "EQoqQclSB6qwJMcqYrYC80yWBFrT85t1UBEcgP3L4Gge4xeOOP"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-12-14", until="2022-12-21",
retryOnRateLimit = 120)
data_tweets
# CONVERTING LIST DATA TO DATA FRAME.
tweetsDF <- twListToDF(data_tweets)
class(tweetsDF)
names(tweetsDF)
View(tweetsDF)
head(tweetsDF)[1:5]
head(tweetsDF$text)[1:5]
# SAVE DATA FRAME FILE.
save(tweetsDF,file = "trendingTweetsDF.Rdata")
# CHECKING FOR MISSING VALUES IN A DATA FRAME.
data_chk <- sapply(tweetsDF, function(x) sum(is.na(x)))
data_chk
# SUBSETTING USING THE dplyr() PACKAGE.
tweetsDF2 <- tweetsDF %>%
select(screenName,text,created,statusSource)
tweetsDF2
# GROUPING THE DATA CREATED.
tweetsDF2 %>%
group_by(1) %>%
summarise(max = max(created), min = min(created))
#Adding column for Created at Round data
data_create <- tweetsDF %>%  mutate(Created_At_Round = created %>% round(units = 'hours') %>% as.POSIXct())
data_create
tweetsDF2 %>% pull(created) %>% min()
tweetsDF2 %>% pull(created) %>% max()
# Plot on tweets by time using the library(plotly) and ggplot().
plt_data <- data_create %>%
dplyr::count(Created_At_Round) %>%
ggplot(mapping = aes(x = Created_At_Round, y = n)) +
theme_light() +
geom_line() +
xlab(label = 'Date') +
ylab(label = NULL) +
ggtitle(label = 'Number of Tweets per Hour')
plt_data %>% ggplotly()
# ===
#pseodu plotting that has a legend
ggplot(data = tweetsDF, aes(x = created)) +
geom_histogram(aes(fill = ..count..)) +
theme(legend.position = "right") +
xlab("Time") + ylab("Number of tweets") +
scale_fill_gradient(low = "midnightblue", high = "aquamarine4")
# PLOTTING STATUS SOURCE.
encodeSource <- function(x) {
if(grepl(">Twitter for iPhone</a>", x)){
"iphone"
}else if(grepl(">Twitter for iPad</a>", x)){
"ipad"
}else if(grepl(">Twitter for Android</a>", x)){
"android"
} else if(grepl(">Twitter Web Client</a>", x)){
"Web"
} else if(grepl(">Twitter for Windows Phone</a>", x)){
"windows phone"
}else if(grepl(">dlvr.it</a>", x)){
"dlvr.it"
}else if(grepl(">IFTTT</a>", x)){
"ifttt"
}else if(grepl(">Facebook</a>", x)){  #This looks unreliable...
"facebook"
}else {
"others"
}
}
#applying encodeSource funtion in the tweetsDF data
tweetsDF2$tweetSource = sapply(tweetsDF$statusSource,
encodeSource)
#Converting to dataframe
data_appSource <- tweetsDF2 %>%
select(tweetSource) %>%
group_by(tweetSource) %>%
summarize(count=n()) %>%
arrange(desc(count))
#plotting for tweetSource
ggplot(tweetsDF2[tweetsDF2$tweetSource != 'others',], aes(tweetSource, fill = tweetSource)) +
geom_bar() +
theme(legend.position="none",
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1)) +
ylab("Number of tweets") +
ggtitle("Tweets by Source")
# Accounts that tweeted from the trentopic Japan.
data_appScreen <- tweetsDF2 %>%
select(screenName) %>%
group_by(screenName) %>%
summarize(count=n()) %>%
arrange(desc(count))
#convert to Corpus
namesCorpus_data <- Corpus(VectorSource(data_appScreen$screenName))  #using ScreenName
class(data_appScreen$screenName)
cls <- class(VectorSource(data_appScreen$screenName))
cls
str(namesCorpus_data)
class(namesCorpus_data)
nms <- namesCorpus_data
nms
# Wordcloud for the screenNames.
word_pal <- brewer.pal(8, "Dark2")
pal_word <- word_pal[-(1:4)]
set.seed(123)
par(mar = c(0,0,0,0), mfrow = c(1,1))
wordcloud(words = namesCorpus_data, scale=c(3,0.5),
max.words=10000,
random.order=FALSE,
rot.per=0.5,
use.r.layout=TRUE,
colors=pal_word)
warning()
warning("50")
# CONVERTING LIST DATA TO DATA FRAME.
tweetsDF <- twListToDF(data_tweets)
# CONVERTING LIST DATA TO DATA FRAME.
tweetsDF <- twListToDF(data_tweets)
class(tweetsDF)
names(tweetsDF)
View(tweetsDF)
head(tweetsDF)[1:5]
head(tweetsDF$text)[1:5]
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-12-14", until="2022-12-21",
retryOnRateLimit = 120)
# EXTRACTING TWEETS.
data_tweets <- searchTwitter("#Japan -filter:retweets", n=10000, lang="en",
since="2022-12-14", until="2022-12-21",
retryOnRateLimit = 120)
data_tweets
# SUBSETTING USING THE dplyr() PACKAGE.
tweetsDF2 <- tweetsDF %>%
select(screenName,text,created,statusSource)
tweetsDF2
#Adding column for Created at Round data
data_create <- tweetsDF %>%  mutate(Created_At_Round = created %>% round(units = 'hours') %>% as.POSIXct())
data_create
tweetsDF2 %>% pull(created) %>% min()
tweetsDF2 %>% pull(created) %>% max()
load("B:/Git/Worksheets/Individual Project 1/trendingTweetsDF.Rdata")
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
# SETUP CREDENTIALS.
CONSUMER_KEY <- "CrXArDLAgmPuQOxVurcBrk3Ez"
CONSUMER_SECRET <- "EQoqQclSB6qwJMcqYrYC80yWBFrT85t1UBEcgP3L4Gge4xeOOP"
ACCESS_TOKEN <-  "1597217544519045120-oZ7NYrQDw5QW4CjCHiO4v9qx9Td2QD"
ACCESS_SECRET <-  "kNlFVVkanyJWXzZfNQmohCZSWlnfGAfVLhzySNEZur2cR"
setup_twitter_oauth(consumer_key = CONSUMER_KEY,
consumer_secret = CONSUMER_SECRET,
access_token = ACCESS_TOKEN,
access_secret = ACCESS_SECRET)
# EXTRACTING TWEETS.
leaguetweets <- searchTwitter("#LeagueOfLegends", n=10000, lang="en", since="2022-11-25", until="2022-12-2", retryOnRateLimit = 120)
leaguetweets
View(leaguetweets)
library(wordcloud)
library(plotly)
library(tm)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(twitteR)
